{"html":"<p><!--<\/p>\n<p>    title: Armbian<\/p>\n<p>    tags: [images,icone,site-tools]<\/p>\n<p>--><\/p>\n<h1 id=\"-con-prite-icons-svg-sage-uide\">SVG Icon Sprite (`icons.svg`) \u2013 Usage Guide<\/h1>\n<p>Version: 0.1 (tentative)  <\/p>\n<p>Status: Draft (adjust sections as needed for your project)<\/p>\n<hr>\n<h2 id=\"1-verview\">1. Overview<\/h2>\n<p>This repository provides a reusable inline SVG symbol sprite (<code>icons.svg<\/code>) containing a set of 24\u00d724 UI icons.  <\/p>\n<p>You include the sprite <b>once<\/b> in the document (inline or injected) and reference each icon with <code><use href=\"#icon-id\"><\/code>.<\/p>\n<p>Advantages:<\/p>\n<ul>\n<li>Single DOM definition, many lightweight <code><use><\/code> references.<\/li>\n<li>Inherits <code>currentColor<\/code> for easy theming.<\/li>\n<li>No network waterfall if inlined.<\/li>\n<li>Easy to extend with additional symbols.<\/li>\n<\/ul>\n<hr>\n<h2 id=\"2-uick-tart\">2. Quick Start<\/h2>\n<h3 id=\"2-1-nline-recommended-for-first-paint-theming-\">2.1 Inline (recommended for first paint + theming)<\/h3>\n<p>Paste the entire sprite near the start of <code><body><\/code> (or via server-side include):<\/p>\n<pre><code class=\"lang-html\">&lt;body&gt;\n  &lt;!-- Icon sprite (load once) --&gt;\n  &lt;svg xmlns=&quot;http:\/\/www.w3.org\/2000\/svg&quot; style=&quot;display:none;&quot; aria-hidden=&quot;true&quot;&gt;\n    &lt;!-- (full symbols from icons.svg inserted here) --&gt;\n  &lt;\/svg&gt;\n\n  &lt;!-- Use an icon --&gt;\n  &lt;button class=&quot;btn&quot;&gt;\n    &lt;svg class=&quot;icon&quot; width=&quot;20&quot; height=&quot;20&quot; aria-hidden=&quot;true&quot;&gt;\n      &lt;use href=&quot;#i-refresh&quot;&gt;&lt;\/use&gt;\n    &lt;\/svg&gt;\n    Refresh\n  &lt;\/button&gt;\n&lt;\/body&gt;\n<\/code><\/pre><h3 id=\"2-2-xternal-file-cached-\">2.2 External file (cached)<\/h3>\n<pre><code class=\"lang-html\">&lt;!-- Inject once (hidden) --&gt;\n&lt;object type=&quot;image\/svg+xml&quot; data=&quot;\/assets\/icons.svg&quot; hidden&gt;&lt;\/object&gt;\n\n&lt;!-- Later: --&gt;\n&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot; width=&quot;20&quot; height=&quot;20&quot;&gt;\n  &lt;use href=&quot;#i-search&quot;&gt;&lt;\/use&gt;\n&lt;\/svg&gt;\n<\/code><\/pre><p>Alternatives: <code><iframe hidden><\/code>, fetch + DOM injection, or build-time bundling.<\/p>\n<hr>\n<h2 id=\"3-eferencing-cons\">3. Referencing Icons<\/h2>\n<p>Basic:<\/p>\n<pre><code class=\"lang-html\">&lt;svg class=&quot;icon&quot; width=&quot;24&quot; height=&quot;24&quot; aria-hidden=&quot;true&quot;&gt;\n  &lt;use href=&quot;#i-settings&quot;&gt;&lt;\/use&gt;\n&lt;\/svg&gt;\n<\/code><\/pre><p>Legacy compatibility (older Safari \/ IE11):<\/p>\n<pre><code class=\"lang-html\">&lt;use xlink:href=&quot;#i-settings&quot;&gt;&lt;\/use&gt;\n<\/code><\/pre><p>Do not duplicate the symbol sprite; only one copy of the <code><svg ... style=\"display:none\"><\/code> wrapper should exist per document.<\/p>\n<hr>\n<h2 id=\"4-ccessibility\">4. Accessibility<\/h2>\n<p>| Use Case | Pattern |<\/p>\n<p>|----------|---------|<\/p>\n<p>| Purely decorative | <code><svg aria-hidden=\"true\"><\/code> |<\/p>\n<p>| Has semantic meaning | Add <code><title><\/code> (and optionally <code>role=\"img\"<\/code>) |<\/p>\n<p>| Dynamic label | Manage <code><title id><\/code> and <code>aria-labelledby<\/code> |<\/p>\n<p>Example (semantic):<\/p>\n<pre><code class=\"lang-html\">&lt;svg class=&quot;icon&quot; role=&quot;img&quot; aria-labelledby=&quot;ttl-refresh&quot;&gt;\n  &lt;title id=&quot;ttl-refresh&quot;&gt;Refresh data&lt;\/title&gt;\n  &lt;use href=&quot;#i-refresh&quot;&gt;&lt;\/use&gt;\n&lt;\/svg&gt;\n<\/code><\/pre><p>If the adjacent text already conveys identical meaning (e.g., button text \u201cDelete\u201d), treat the icon as decorative (<code>aria-hidden=\"true\"<\/code>).<\/p>\n<hr>\n<h2 id=\"5-heming-tyling\">5. Theming & Styling<\/h2>\n<p>All icons rely on <code>currentColor<\/code> unless explicitly overridden.<\/p>\n<pre><code class=\"lang-css\">.icon {\n  width: 1em;\n  height: 1em;\n  display: inline-block;\n  vertical-align: middle;\n  fill: currentColor; \/* Ensure fill inheritance *\/\n}\n.icon.muted { color: #777; }\n.icon.danger { color: #d63636; }\n<\/code><\/pre><p>Per-icon override:<\/p>\n<pre><code class=\"lang-css\">.icon[name=&quot;warning&quot;] { color: #e6a100; }\n<\/code><\/pre><p>Stroke-based icons: if you add strokes later, ensure consistent <code>stroke-linecap<\/code> \/ <code>stroke-linejoin<\/code>.<\/p>\n<hr>\n<h2 id=\"6-con-nventory-urrent-et-\">6. Icon Inventory (Current Set)<\/h2>\n<p>Ids and indicative semantics:<\/p>\n<pre><code>i-book            Documentation \/ library\ni-palette         Theme \/ appearance \/ design\ni-home            Home \/ dashboard\ni-settings        Settings \/ preferences\ni-pin             Location \/ pin\ni-search          Search\ni-filter          Filter\ni-sort-v          Sort vertical (two axes)\ni-refresh         Refresh \/ sync\ni-plus            Add \/ create\ni-minus           Remove \/ collapse\ni-edit            Edit \/ modify\ni-trash           Delete\ni-download        Download (generic)\ni-download-box    Download into container\ni-download-archive Download archive\/package\ni-download-file   Download file\ni-upload          Upload\ni-clipboard       Clipboard \/ copy\ni-external        External link\ni-info            Informational\ni-warning         Warning \/ caution\ni-error           Error \/ failure\ni-check           Success \/ confirmation\ni-close           Close \/ dismiss\ni-user            User \/ profile\ni-lock            Locked \/ secure\ni-lock-open       Unlocked\ni-tag             Tag \/ label\ni-star            Favorite \/ rating\ni-eye             Visible \/ preview\ni-eye-off         Hidden \/ conceal\ni-bell            Notifications\ni-terminal        Console \/ shell\ni-database        Database \/ storage\ni-link            Link \/ connect\ni-unlink          Unlink \/ disconnect\ni-list            List view\ni-grid            Grid view\ni-arrow-right     Navigate forward\ni-chevron-down    Expand \/ dropdown\ni-folder          Folder\ni-file            File\ni-menu            Hamburger \/ menu\ni-color           Color mode \/ palette (overlaps with i-palette)\n<\/code><\/pre><p>Note: <code>i-palette<\/code> vs <code>i-color<\/code> are semantically close. Decide whether both are required.<\/p>\n<hr>\n<h2 id=\"7-dding-ew-cons\">7. Adding New Icons<\/h2>\n<ol>\n<li>Maintain <code>viewBox=\"0 0 24 24\"<\/code> for consistency.<\/li>\n<li>Use a unique id naming pattern: <code>i-{kebab-case}<\/code>.<\/li>\n<li>Optimize path data:<\/li>\n<p>   - Merge contiguous shapes when possible.<\/p>\n<p>   - Remove redundant decimals (<code>.5<\/code> not <code>0.5<\/code>).<\/p>\n<p>   - Round coordinates to at most 2\u20133 decimal places.<\/p>\n<li>Keep related shapes grouped logically (for potential animation ordering).<\/li>\n<li>Test at 16px, 20px, 24px for legibility.<\/li>\n<\/ol>\n<p>Template:<\/p>\n<pre><code class=\"lang-xml\">&lt;symbol id=&quot;i-new-icon&quot; viewBox=&quot;0 0 24 24&quot;&gt;\n  &lt;path d=&quot;...&quot;\/&gt;\n&lt;\/symbol&gt;\n<\/code><\/pre><hr>\n<h2 id=\"8-ptimization-orkflow-ptional-\">8. Optimization Workflow (Optional)<\/h2>\n<p>Example using <code>svgo<\/code>:<\/p>\n<p><code>svgo.config.json<\/code> (subset):<\/p>\n<pre><code class=\"lang-json\">{\n  &quot;multipass&quot;: true,\n  &quot;plugins&quot;: [\n    &quot;cleanupAttrs&quot;,\n    &quot;removeComments&quot;,\n    &quot;removeMetadata&quot;,\n    { &quot;name&quot;: &quot;convertPathData&quot;, &quot;params&quot;: { &quot;straightCurves&quot;: true } }\n  ]\n}\n<\/code><\/pre><p>Process step:<\/p>\n<pre><code class=\"lang-bash\">svgo --config=svgo.config.json -i icons.svg -o icons.min.svg\n<\/code><\/pre><p>If generating a subset for a specific bundle:<\/p>\n<ul>\n<li>Parse HTML\/JSX templates for <code>#i-...<\/code> usage.<\/li>\n<li>Extract only matching <code><symbol><\/code> nodes.<\/li>\n<li>Emit a reduced sprite for that page (build-time only; not required for most cases).<\/li>\n<\/ul>\n<hr>\n<h2 id=\"9-ntegration-xamples\">9. Integration Examples<\/h2>\n<h3 id=\"9-1-eact-static-import-then-inject-\">9.1 React (static import then inject)<\/h3>\n<pre><code class=\"lang-jsx\">\/\/ SpriteInjector.jsx\nimport sprite from &#039;.\/icons.svg?raw&#039;;\n\nexport function SpriteInjector() {\n  return &lt;div dangerouslySetInnerHTML={{ __html: sprite }} \/&gt;;\n}\n\n\/\/ Usage in root layout\n\/\/ &lt;SpriteInjector \/&gt;\n\/\/ &lt;svg className=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;use href=&quot;#i-user&quot; \/&gt;&lt;\/svg&gt;\n<\/code><\/pre><h3 id=\"9-2-ue\">9.2 Vue<\/h3>\n<pre><code class=\"lang-vue\">&lt;!-- In App.vue --&gt;\n&lt;template&gt;\n  &lt;div v-html=&quot;sprite&quot; style=&quot;display:none&quot; aria-hidden=&quot;true&quot;&gt;&lt;\/div&gt;\n  &lt;button&gt;\n    &lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;use href=&quot;#i-plus&quot; \/&gt;&lt;\/svg&gt;\n    Add\n  &lt;\/button&gt;\n&lt;\/template&gt;\n\n&lt;script setup&gt;\nimport sprite from &#039;.\/icons.svg?raw&#039;;\n&lt;\/script&gt;\n<\/code><\/pre><h3 id=\"9-3-velte\">9.3 Svelte<\/h3>\n<pre><code class=\"lang-svelte\">&lt;!-- +layout.svelte --&gt;\n{@html sprite}\n&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;use href=&quot;#i-terminal&quot; \/&gt;&lt;\/svg&gt;\n\n&lt;script&gt;\n  import sprite from &#039;.\/icons.svg?raw&#039;;\n&lt;\/script&gt;\n<\/code><\/pre><h3 id=\"9-4-erver-ide-xpress-ode-\">9.4 Server-Side (Express \/ Node)<\/h3>\n<p>Embed at render time:<\/p>\n<pre><code class=\"lang-js\">const fs = require(&#039;fs&#039;);\nconst sprite = fs.readFileSync(&#039;public\/icons.svg&#039;, &#039;utf8&#039;);\nres.send(`&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;${sprite} ... &lt;\/body&gt;&lt;\/html&gt;`);\n<\/code><\/pre><hr>\n<h2 id=\"10-aching-ersioning\">10. Caching & Versioning<\/h2>\n<p>Strategy:<\/p>\n<ul>\n<li>Inline copy: No additional HTTP request; update invalidates instantly on deploy.<\/li>\n<li>External file: Use filename hashing (<code>icons.v0.1.svg<\/code> \u2192 <code>icons.v0.2.svg<\/code>) or query param <code>icons.svg?v=0.2<\/code>.<\/li>\n<\/ul>\n<p>Increment version whenever geometry changes; CSS-driven color\/stroke changes do not require a version bump unless appearance contract changes.<\/p>\n<hr>\n<h2 id=\"11-erformance-onsiderations\">11. Performance Considerations<\/h2>\n<p>| Topic | Notes |<\/p>\n<p>|-------|-------|<\/p>\n<p>| First Paint | Inline avoids an extra network round-trip. |<\/p>\n<p>| DOM Weight | Symbol definitions are inert; <code><use><\/code> clones are lightweight. |<\/p>\n<p>| Subsetting | Only necessary at very large icon counts (>200 symbols) or strict budgets. |<\/p>\n<p>| HTTP Cache | External sprite benefits from long cache (immutable hashed filename). |<\/p>\n<p>| FOUC \/ Flash | Avoid external injection that depends on JS executing late. |<\/p>\n<hr>\n<h2 id=\"12-nimations-ptional-\">12. Animations (Optional)<\/h2>\n<p>You can target internal paths with <code>:where()<\/code> or descendant selectors when instanced:<\/p>\n<pre><code class=\"lang-css\">.icon.spin use[href=&quot;#i-refresh&quot;] {\n  animation: spin 1s linear infinite;\n}\n@keyframes spin { to { transform: rotate(360deg); } }\n<\/code><\/pre><p>If advanced per-path animation needed, wrap with an inline <code><svg><\/code> referencing <code><symbol><\/code> content duplicated explicitly (rare case).<\/p>\n<hr>\n<h2 id=\"13-roubleshooting\">13. Troubleshooting<\/h2>\n<p>| Symptom | Cause | Resolution |<\/p>\n<p>|---------|-------|-----------|<\/p>\n<p>| Icon not visible | Missing sprite or wrong id | Confirm sprite loaded and <code>href=\"#i-...\"<\/code> matches symbol id |<\/p>\n<p>| Wrong color | CSS not applying <code>fill: currentColor<\/code> | Add <code>.icon { fill: currentColor; }<\/code> |<\/p>\n<p>| Broken in older browser | <code>href<\/code> unsupported | Use <code>xlink:href<\/code> fallback |<\/p>\n<p>| Duplicate symbols error | Sprite injected multiple times | Ensure injection occurs once (guard at app root) |<\/p>\n<p>| Layout shift | Dimensions missing | Set explicit <code>width<\/code>\/<code>height<\/code> or CSS sizing |<\/p>\n<hr>\n<h2 id=\"14-igration-uidelines\">14. Migration Guidelines<\/h2>\n<p>If moving from embedded <code><img><\/code> or font icons:<\/p>\n<ol>\n<li>Introduce sprite inline.<\/li>\n<li>Replace <code><img src=\"...\/trash.svg\"><\/code> with <code><svg aria-hidden=\"true\"><use href=\"#i-trash\"><\/use><\/svg><\/code>.<\/li>\n<li>Remove legacy icon font CSS after coverage reaches 100%.<\/li>\n<li>Audit for accessibility differences (fonts often relied on <code>aria-hidden=\"true\"<\/code> already).<\/li>\n<\/ol>\n<hr>\n<h2 id=\"15-onsistency-ules-esign-\">15. Consistency Rules (Design)<\/h2>\n<p>| Rule | Rationale |<\/p>\n<p>|------|-----------|<\/p>\n<p>| 24\u00d724 grid, 1\u20132px stroke equivalent visual weight | Cohesive look |<\/p>\n<p>| Avoid excessive detail below 16px | Legibility |<\/p>\n<p>| Align key geometry on 0.5 or integer coordinates | Crisp rendering |<\/p>\n<p>| Prefer path merges to many disjoint paths | Smaller file |<\/p>\n<p>| Maintain optical centering (not exact bounding box) | Balanced appearance |<\/p>\n<hr>\n<h2 id=\"16-alidation-hecklist-efore-ommit-\">16. Validation Checklist (Before Commit)<\/h2>\n<ul>\n<li>[ ] New symbol id unique and prefixed with <code>i-<\/code>.<\/li>\n<li>[ ] <code>viewBox=\"0 0 24 24\"<\/code> preserved.<\/li>\n<li>[ ] No inline <code>style<\/code> attributes unless necessary.<\/li>\n<li>[ ] Path data optimized (no redundant decimals).<\/li>\n<li>[ ] Works at 16px + 24px render sizes.<\/li>\n<li>[ ] Accessibility: Provide guidance if meaning differs from name.<\/li>\n<\/ul>\n<hr>\n<h2 id=\"17-ecurity-otes\">17. Security Notes<\/h2>\n<ul>\n<li>Do not accept untrusted runtime user input into the sprite; treat it as a static asset.<\/li>\n<li>Avoid inline event handlers or script tags inside <code><symbol><\/code> (none included now).<\/li>\n<\/ul>\n<hr>\n<h2 id=\"18-icense-laceholder-\">18. License (Placeholder)<\/h2>\n<p>Insert actual license (e.g., MIT, Apache-2.0, CC-BY-4.0).  <\/p>\n<p>If combining third-party paths, ensure their licenses allow redistribution and include attribution if required.<\/p>\n<hr>\n<h2 id=\"19-xample-inimal-uild-xtraction-ptional-\">19. Example Minimal Build Extraction (Optional)<\/h2>\n<p>If you want to auto-generate a subset sprite per page:<\/p>\n<pre><code class=\"lang-js\">\/\/ build\/extract-icons.js (example sketch)\nimport fs from &#039;node:fs&#039;;\n\nconst source = fs.readFileSync(&#039;icons.svg&#039;, &#039;utf8&#039;);\nconst usedIds = new Set();\n\n\/\/ Naive scan: look for href=&quot;#i-...&quot;\nconst html = fs.readFileSync(&#039;dist\/index.html&#039;, &#039;utf8&#039;);\n[...html.matchAll(\/href=&quot;#(i-[a-z0-9-]+)&quot;\/g)].forEach(m =&gt; usedIds.add(m[1]));\n\nconst symbols = [...source.matchAll(\/&lt;symbol[^&gt;]*id=&quot;(i-[^&quot;]+)&quot;[\\s\\S]*?&lt;\\\/symbol&gt;\/g)]\n  .filter(m =&gt; usedIds.has(m[1]))\n  .map(m =&gt; m[0])\n  .join(&#039;\\n&#039;);\n\nconst subset = `&lt;svg xmlns=&quot;http:\/\/www.w3.org\/2000\/svg&quot; style=&quot;display:none&quot; aria-hidden=&quot;true&quot;&gt;\\n${symbols}\\n&lt;\/svg&gt;\\n`;\nfs.writeFileSync(&#039;dist\/icons-subset.svg&#039;, subset);\n<\/code><\/pre><p>(Tentative; refine with a real XML parser for robustness.)<\/p>\n<hr>\n<h2 id=\"20-oadmap-ptional-ection-\">20. Roadmap (Optional Section)<\/h2>\n<p>| Item | Status |<\/p>\n<p>|------|--------|<\/p>\n<p>| Remove semantic overlap (palette vs color) | (planned) |<\/p>\n<p>| Add dark-mode specific variant icons | (planned) |<\/p>\n<p>| Add animation utilities | (tentative) |<\/p>\n<p>| Provide TypeScript mapping enum | (optional) |<\/p>\n<hr>\n<h2 id=\"21-\">21. FAQ<\/h2>\n<p>Q: Can <code><use><\/code> re-color individual segments?  <\/p>\n<p>A: Only via CSS selectors targeting internal shapes if they have class names. Current symbols have no per-part classes; add minimally if needed.<\/p>\n<p>Q: Can I inline only a single symbol?  <\/p>\n<p>A: Yes, but you lose the benefit of a shared sprite; simpler for one-off icons.<\/p>\n<p>Q: Do I need <code>role=\"img\"<\/code>?  <\/p>\n<p>A: Only when the icon alone conveys essential meaning (no adjacent textual label).<\/p>\n<hr>\n<h2 id=\"22-hange-og-tart-ere-hen-ersioning-\">22. Change Log (Start Here When Versioning)<\/h2>\n<ul>\n<li>0.1: Initial symbol set, baseline documentation.<\/li>\n<\/ul>\n<hr>\n<h2 id=\"23-ontributing\">23. Contributing<\/h2>\n<ol>\n<li>Open an issue describing new icon purpose (ensure non-duplication).<\/li>\n<li>Provide monochrome SVG (24\u00d724).<\/li>\n<li>Follow optimization + checklist.<\/li>\n<li>Add entry to inventory list (Section 6).<\/li>\n<li>Update version if paths changed (Section 22).<\/li>\n<\/ol>\n<hr>\n<h2 id=\"24-inimal-opy-aste-nippet\">24. Minimal Copy-Paste Snippet<\/h2>\n<pre><code class=\"lang-html\">&lt;!-- Include once --&gt;\n&lt;svg xmlns=&quot;http:\/\/www.w3.org\/2000\/svg&quot; style=&quot;display:none&quot; aria-hidden=&quot;true&quot;&gt;\n  &lt;!-- symbols --&gt;\n&lt;\/svg&gt;\n\n&lt;!-- Use --&gt;\n&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;use href=&quot;#i-check&quot;\/&gt;&lt;\/svg&gt;\n<\/code><\/pre><hr>\n<p>(End of README)<\/p>\n","toc":[{"level":1,"text":"SVG Icon Sprite (`icons.svg`) \u2013 Usage Guide","id":"-con-prite-icons-svg-sage-uide"},{"level":2,"text":"1. Overview","id":"1-verview"},{"level":2,"text":"2. Quick Start","id":"2-uick-tart"},{"level":3,"text":"2.1 Inline (recommended for first paint + theming)","id":"2-1-nline-recommended-for-first-paint-theming-"},{"level":3,"text":"2.2 External file (cached)","id":"2-2-xternal-file-cached-"},{"level":2,"text":"3. Referencing Icons","id":"3-eferencing-cons"},{"level":2,"text":"4. Accessibility","id":"4-ccessibility"},{"level":2,"text":"5. Theming & Styling","id":"5-heming-tyling"},{"level":2,"text":"6. Icon Inventory (Current Set)","id":"6-con-nventory-urrent-et-"},{"level":2,"text":"7. Adding New Icons","id":"7-dding-ew-cons"},{"level":2,"text":"8. Optimization Workflow (Optional)","id":"8-ptimization-orkflow-ptional-"},{"level":2,"text":"9. Integration Examples","id":"9-ntegration-xamples"},{"level":3,"text":"9.1 React (static import then inject)","id":"9-1-eact-static-import-then-inject-"},{"level":3,"text":"9.2 Vue","id":"9-2-ue"},{"level":3,"text":"9.3 Svelte","id":"9-3-velte"},{"level":3,"text":"9.4 Server-Side (Express \/ Node)","id":"9-4-erver-ide-xpress-ode-"},{"level":2,"text":"10. Caching & Versioning","id":"10-aching-ersioning"},{"level":2,"text":"11. Performance Considerations","id":"11-erformance-onsiderations"},{"level":2,"text":"12. Animations (Optional)","id":"12-nimations-ptional-"},{"level":2,"text":"13. Troubleshooting","id":"13-roubleshooting"},{"level":2,"text":"14. Migration Guidelines","id":"14-igration-uidelines"},{"level":2,"text":"15. Consistency Rules (Design)","id":"15-onsistency-ules-esign-"},{"level":2,"text":"16. Validation Checklist (Before Commit)","id":"16-alidation-hecklist-efore-ommit-"},{"level":2,"text":"17. Security Notes","id":"17-ecurity-otes"},{"level":2,"text":"18. License (Placeholder)","id":"18-icense-laceholder-"},{"level":2,"text":"19. Example Minimal Build Extraction (Optional)","id":"19-xample-inimal-uild-xtraction-ptional-"},{"level":2,"text":"20. Roadmap (Optional Section)","id":"20-oadmap-ptional-ection-"},{"level":2,"text":"21. FAQ","id":"21-"},{"level":2,"text":"22. Change Log (Start Here When Versioning)","id":"22-hange-og-tart-ere-hen-ersioning-"},{"level":2,"text":"23. Contributing","id":"23-ontributing"},{"level":2,"text":"24. Minimal Copy-Paste Snippet","id":"24-inimal-opy-aste-nippet"}]}